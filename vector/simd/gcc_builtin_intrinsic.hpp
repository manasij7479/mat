#ifndef MAT_VECTOR_GCC_BUILTIN_HPP#define MAT_VECTOR_GCC_BUILTIN_HPPnamespace mat{	typedef float v4sf __attribute__ ((vector_size(sizeof(float)*4)));	typedef int v4si __attribute__ ((vector_size(sizeof(int)*4)));	typedef int v2si __attribute__ ((vector_size(sizeof(int)*2)));		union vector4f	{		v4sf _v;		float f[4];	};		union vector4i	{		v4si _v;		int  i[4];	}; 		void add_sse2(const float* lhs, const float* rhs, float *result, unsigned int size = 4)	{		size -= size % 4 ; 		vector4f a, b, r ; 		for(unsigned int i=0; i<size; i+=4)		{			//Initialising...			a.f[i] = rhs[i]; b.f[i] = lhs[i]; 			a.f[i+1] = rhs[i+1]; b.f[i+1] = lhs[i+1]; 			a.f[i+2] = rhs[i+2]; b.f[i+2] = lhs[i+2]; 			a.f[i+3] = rhs[i+3]; b.f[i+3] = lhs[i+3]; 						//Perform vector addition			r._v = __builtin_ia32_addps (a._v, b._v) ;						//Load back result			result[i] = r.f[i]; result[i+1] = r.f[i+1] ;			result[i+2] = r.f[i+2]; result[i+3] = r.f[i+3];		}	}			void add_sse2(const int* lhs, const int* rhs, int *result, unsigned int size = 4)	{		size -= size % 4 ; 		vector4i a, b, r ; 		for(unsigned int i=0; i<size; i+=4)		{			//Initialising...			a.i[i] = rhs[i]; b.i[i] = lhs[i]; 			a.i[i+1] = rhs[i+1]; b.i[i+1] = lhs[i+1]; 			a.i[i+2] = rhs[i+2]; b.i[i+2] = lhs[i+2]; 			a.i[i+3] = rhs[i+3]; b.i[i+3] = lhs[i+3]; 						//Perform vector addition			r._v = a._v + b._v ;						//Load back result			result[i] = r.i[i]; result[i+1] = r.i[i+1] ;			result[i+2] = r.i[i+2]; result[i+3] = r.i[i+3];		}	}				void mult_sse2(const float* lhs, const float* rhs, float *result, unsigned int size = 4)	{		size -= size % 4 ; 		vector4f a, b, r ; 		for(unsigned int i=0; i<size; i+=4)		{			//Initialising...			a.f[i] = rhs[i]; b.f[i] = lhs[i]; 			a.f[i+1] = rhs[i+1]; b.f[i+1] = lhs[i+1]; 			a.f[i+2] = rhs[i+2]; b.f[i+2] = lhs[i+2]; 			a.f[i+3] = rhs[i+3]; b.f[i+3] = lhs[i+3]; 						//Perform vector multiplication			r._v =  __builtin_ia32_mulps (a._v, b._v);						//Load back result			result[i] = r.f[i]; result[i+1] = r.f[i+1] ;			result[i+2] = r.f[i+2]; result[i+3] = r.f[i+3];		}	}		void mult_sse2(const int* lhs, const int* rhs, int *result, unsigned int size = 4)	{		size -= size % 4 ; 		vector4f a, b, r ; 		for(unsigned int i=0; i<size; i+=4)		{			//Initialising...			a.f[i] = rhs[i]; b.f[i] = lhs[i]; 			a.f[i+1] = rhs[i+1]; b.f[i+1] = lhs[i+1]; 			a.f[i+2] = rhs[i+2]; b.f[i+2] = lhs[i+2]; 			a.f[i+3] = rhs[i+3]; b.f[i+3] = lhs[i+3]; 						//Perform vector multiplication			r._v =  a._v * b._v;						//Load back result			result[i] = r.i[i]; result[i+1] = r.i[i+1] ;			result[i+2] = r.i[i+2]; result[i+3] = r.i[i+3];		}	}		}#endif 